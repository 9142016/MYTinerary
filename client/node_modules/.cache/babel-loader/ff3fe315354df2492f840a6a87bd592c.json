{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALON\\\\Documents\\\\0 My ACTUAL Documents\\\\0 learning IT\\\\0Ubiqum\\\\MERN\\\\MYtinerary\\\\client\\\\src\\\\components\\\\CitiesList.js\";\nimport React from \"react\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getCities } from \"../store/actions/citiesActions\";\nimport \"./css/previewLists.css\";\n\nclass CitiesList extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      citiesFilter: \"\"\n    };\n  } //on mount, fetch cities form MongoDB, set redux state, and store here in props\n\n\n  componentDidMount() {\n    this.props.getCities();\n  } // determinds relevant cities to filter\n  // if this.state.citiesFilter is empty, return all cities from props provided by reduc state\n  // otherwise if this.state.citiesFilter is NOT empty, map relevent array from all cities using the filter\n\n\n  relevantCities() {\n    let cities = [];\n\n    if (this.state.citiesFilter && this.state.citiesFilter !== \"\") {\n      cities = this.props.cities.map(city => {\n        return city.includes(this.state.citiesFilter) ? city : null;\n      });\n      console.log(\"one\");\n    } else {\n      cities = this.props.cities;\n      console.log(\"two\");\n    }\n\n    this.citiesBody(cities);\n  } //function that creates styled divs per city\n\n\n  citiesBody(relevantCities) {\n    if (relevantCities > 1) {\n      let body = relevantCities.map(city => {\n        return React.createElement(\"div\", {\n          className: \"cardbody\",\n          key: city._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, React.createElement(NavLink, {\n          to: \"/itineraries/\" + city.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, city.name), React.createElement(\"img\", {\n          src: city.preview_img,\n          alt: \"preview card for city\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        })));\n      });\n      return body;\n    }\n  } // function that is called onChange of the searchbar value. updates this.state value\n\n\n  onChangeOfFilterValue(event) {\n    this.setState({\n      citiesFilter: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"citiesHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"All Cities\"), React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.onChangeOfFilterValue.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(NavLink, {\n      to: \"/itineraries/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"see all itineraries\"))), \" \", this.relevantCities());\n  }\n\n} //grab cities from redux-store-state and save as params here under this.props.city\n\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities\n  };\n}; //store dispatch actions/methods in props here\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCities: () => dispatch(getCities())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(CitiesList));","map":{"version":3,"sources":["C:\\Users\\ALON\\Documents\\0 My ACTUAL Documents\\0 learning IT\\0Ubiqum\\MERN\\MYtinerary\\client\\src\\components\\CitiesList.js"],"names":["React","NavLink","withRouter","connect","getCities","CitiesList","Component","constructor","state","citiesFilter","componentDidMount","props","relevantCities","cities","map","city","includes","console","log","citiesBody","body","_id","name","preview_img","onChangeOfFilterValue","event","setState","target","value","render","bind","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getCities } from \"../store/actions/citiesActions\";\r\nimport \"./css/previewLists.css\";\r\n\r\nclass CitiesList extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      citiesFilter: \"\"\r\n    };\r\n  }\r\n  //on mount, fetch cities form MongoDB, set redux state, and store here in props\r\n  componentDidMount() {\r\n    this.props.getCities();\r\n  }\r\n\r\n  // determinds relevant cities to filter\r\n  // if this.state.citiesFilter is empty, return all cities from props provided by reduc state\r\n  // otherwise if this.state.citiesFilter is NOT empty, map relevent array from all cities using the filter\r\n  relevantCities() {\r\n    let cities = [];\r\n    if (this.state.citiesFilter && this.state.citiesFilter !== \"\") {\r\n      cities = this.props.cities.map(city => {\r\n        return city.includes(this.state.citiesFilter) ? city : null;\r\n      });\r\n      console.log(\"one\");\r\n    } else {\r\n      cities = this.props.cities;\r\n      console.log(\"two\");\r\n    }\r\n    this.citiesBody(cities);\r\n  }\r\n\r\n  //function that creates styled divs per city\r\n  citiesBody(relevantCities) {\r\n    if (relevantCities > 1) {\r\n      let body = relevantCities.map(city => {\r\n        return (\r\n          <div className=\"cardbody\" key={city._id}>\r\n            <NavLink to={\"/itineraries/\" + city.name}>\r\n              <h2>{city.name}</h2>\r\n              <img src={city.preview_img} alt=\"preview card for city\" />\r\n            </NavLink>\r\n          </div>\r\n        );\r\n      });\r\n      return body;\r\n    }\r\n  }\r\n  // function that is called onChange of the searchbar value. updates this.state value\r\n  onChangeOfFilterValue(event) {\r\n    this.setState({\r\n      citiesFilter: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"citiesHeading\">\r\n          <h1>All Cities</h1>\r\n          <input type=\"text\" onChange={this.onChangeOfFilterValue.bind(this)} />\r\n          <NavLink to=\"/itineraries/\">\r\n            <p>see all itineraries</p>\r\n          </NavLink>\r\n        </div>{\" \"}\r\n        {this.relevantCities()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//grab cities from redux-store-state and save as params here under this.props.city\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cities: state.cities\r\n  };\r\n};\r\n\r\n//store dispatch actions/methods in props here\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getCities: () => dispatch(getCities())\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(CitiesList));\r\n"]},"metadata":{},"sourceType":"module"}