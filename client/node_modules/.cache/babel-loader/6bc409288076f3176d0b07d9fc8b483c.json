{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALON\\\\Documents\\\\0 My ACTUAL Documents\\\\0 learning IT\\\\0Ubiqum\\\\MERN\\\\MYtinerary\\\\client\\\\src\\\\components\\\\ItinerariesList.js\";\nimport React from \"react\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { addCurrentItineraryID, getRelevantItineraries } from \"../store/actions/itineraryActions\";\nimport \"./css/previewLists.css\"; //component for showing lists of itineraries. the itinerary details page is a seperate component named ItineraryDetails\n\nclass ItinerariesList extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      itinerariesFilter: \"\"\n    };\n  }\n\n  componentDidMount() {\n    let param = \"\";\n    let apiRouteParam = \"\";\n\n    if (this.props.match.params.cityName) {\n      param = this.props.match.params.cityName;\n      apiRouteParam = \"/byCity\";\n    }\n\n    if (this.props.match.params.category) {\n      param = this.props.match.params.category;\n      apiRouteParam = \"/byCategory\";\n    } //filter all itineraries by param\n\n\n    if (param) {\n      this.props.getItinerariesByCity(param);\n    } else this.props.getAllItineraries();\n  }\n\n  returnFilteredItineraries() {\n    let itineraries = [];\n    this.state.itinerariesFilter !== \"\" ? this.props.itineraries.map(itinerary => {\n      if (itinerary.title.toLowerCase().includes(this.state.itinerariesFilter.toLowerCase())) {\n        itineraries.push(itinerary);\n      }\n    }) : itineraries = this.props.itineraries;\n    return itineraries;\n  } //function that creates styled divs per relevant itinerary\n\n\n  itinerariesBody() {\n    let relevantItineraries = this.returnFilteredItineraries();\n\n    if (relevantItineraries.length > 1) {\n      let body = relevantItineraries.map(itinerary => {\n        return React.createElement(\"div\", {\n          className: \"cardbody\",\n          key: itinerary._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, React.createElement(NavLink, {\n          to: \"/itinerary/\" + itinerary._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, itinerary.title), React.createElement(\"img\", {\n          src: itinerary.coverPhoto,\n          alt: \"cover for itinerary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          className: \"itineraryDetailsUnderTitle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          className: \"detail\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, itinerary.city), React.createElement(\"h3\", {\n          className: \"price detail\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, itinerary.price), React.createElement(\"span\", {\n          className: \"rating detail\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, \"\\u2606\"), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, \"\\u2606\"), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, \"\\u2606\"), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, \"\\u2606\"), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, \"\\u2606\")))));\n      });\n      return body;\n    }\n  } // function that is called onChange of the searchbar value. updates this.state value\n\n\n  onChangeOfFilterValue(event) {\n    this.setState({\n      itinerariesFilter: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.props.match.params.cityName ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.props.match.params.cityName) : React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"All Itineraries\"), React.createElement(\"input\", {\n      className: \"filterTextBox\",\n      type: \"text\",\n      placeholder: \"search\",\n      onChange: this.onChangeOfFilterValue.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(NavLink, {\n      to: \"/cities/\",\n      className: \"seeAllLink\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"see all cities\"), this.itinerariesBody());\n  }\n\n} //grab cities from redux-store-state and save as params here under this.props.itineraries\n\n\nconst mapStateToProps = state => {\n  return {\n    itineraries: state.itineraries\n  };\n}; //store dispatch actions/methods in props here\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addCurrentItineraryID: id => dispatch(addCurrentItineraryID(id)),\n    getItinerariesByCity: param => dispatch(getItinerariesByCity(param)),\n    getAllItineraries: () => dispatch(getAllItineraries())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ItinerariesList));","map":{"version":3,"sources":["C:\\Users\\ALON\\Documents\\0 My ACTUAL Documents\\0 learning IT\\0Ubiqum\\MERN\\MYtinerary\\client\\src\\components\\ItinerariesList.js"],"names":["React","NavLink","withRouter","connect","addCurrentItineraryID","getRelevantItineraries","ItinerariesList","Component","constructor","state","itinerariesFilter","componentDidMount","param","apiRouteParam","props","match","params","cityName","category","getItinerariesByCity","getAllItineraries","returnFilteredItineraries","itineraries","map","itinerary","title","toLowerCase","includes","push","itinerariesBody","relevantItineraries","length","body","_id","coverPhoto","city","price","onChangeOfFilterValue","event","setState","target","value","render","bind","mapStateToProps","mapDispatchToProps","dispatch","id"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  addCurrentItineraryID,\r\n  getRelevantItineraries\r\n} from \"../store/actions/itineraryActions\";\r\nimport \"./css/previewLists.css\";\r\n\r\n//component for showing lists of itineraries. the itinerary details page is a seperate component named ItineraryDetails\r\n\r\nclass ItinerariesList extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      itinerariesFilter: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    let param = \"\";\r\n    let apiRouteParam = \"\";\r\n\r\n    if (this.props.match.params.cityName) {\r\n      param = this.props.match.params.cityName;\r\n      apiRouteParam = \"/byCity\";\r\n    }\r\n    if (this.props.match.params.category) {\r\n      param = this.props.match.params.category;\r\n      apiRouteParam = \"/byCategory\";\r\n    }\r\n\r\n    //filter all itineraries by param\r\n    if (param) {\r\n      this.props.getItinerariesByCity(param);\r\n    } else this.props.getAllItineraries();\r\n  }\r\n  returnFilteredItineraries() {\r\n    let itineraries = [];\r\n    this.state.itinerariesFilter !== \"\"\r\n      ? this.props.itineraries.map(itinerary => {\r\n          if (\r\n            itinerary.title\r\n              .toLowerCase()\r\n              .includes(this.state.itinerariesFilter.toLowerCase())\r\n          ) {\r\n            itineraries.push(itinerary);\r\n          }\r\n        })\r\n      : (itineraries = this.props.itineraries);\r\n    return itineraries;\r\n  }\r\n\r\n  //function that creates styled divs per relevant itinerary\r\n  itinerariesBody() {\r\n    let relevantItineraries = this.returnFilteredItineraries();\r\n    if (relevantItineraries.length > 1) {\r\n      let body = relevantItineraries.map(itinerary => {\r\n        return (\r\n          <div className=\"cardbody\" key={itinerary._id}>\r\n            <NavLink to={\"/itinerary/\" + itinerary._id}>\r\n              <h2>{itinerary.title}</h2>\r\n\r\n              <img src={itinerary.coverPhoto} alt=\"cover for itinerary\" />\r\n              <span className=\"itineraryDetailsUnderTitle\">\r\n                <h3 className=\"detail\">{itinerary.city}</h3>\r\n\r\n                <h3 className=\"price detail\">{itinerary.price}</h3>\r\n                <span className=\"rating detail\">\r\n                  <span>☆</span>\r\n                  <span>☆</span>\r\n                  <span>☆</span>\r\n                  <span>☆</span>\r\n                  <span>☆</span>\r\n                </span>\r\n              </span>\r\n            </NavLink>\r\n          </div>\r\n        );\r\n      });\r\n      return body;\r\n    }\r\n  }\r\n\r\n  // function that is called onChange of the searchbar value. updates this.state value\r\n  onChangeOfFilterValue(event) {\r\n    this.setState({\r\n      itinerariesFilter: event.target.value\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"heading\">\r\n          {this.props.match.params.cityName ? (\r\n            <h1>{this.props.match.params.cityName}</h1>\r\n          ) : (\r\n            <h1>All Itineraries</h1>\r\n          )}\r\n\r\n          <input\r\n            className=\"filterTextBox\"\r\n            type=\"text\"\r\n            placeholder=\"search\"\r\n            onChange={this.onChangeOfFilterValue.bind(this)}\r\n          />\r\n        </div>\r\n        <NavLink to=\"/cities/\" className=\"seeAllLink\">\r\n          see all cities\r\n        </NavLink>\r\n        {this.itinerariesBody()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//grab cities from redux-store-state and save as params here under this.props.itineraries\r\nconst mapStateToProps = state => {\r\n  return {\r\n    itineraries: state.itineraries\r\n  };\r\n};\r\n//store dispatch actions/methods in props here\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addCurrentItineraryID: id => dispatch(addCurrentItineraryID(id)),\r\n    getItinerariesByCity: param => dispatch(getItinerariesByCity(param)),\r\n    getAllItineraries: () => dispatch(getAllItineraries())\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(ItinerariesList));\r\n"]},"metadata":{},"sourceType":"module"}