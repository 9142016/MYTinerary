{"ast":null,"code":"function handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n}\n\nexport const getItineraries = payload => {\n  return dispatch => {\n    return fetch(\"/api/itineraries/\" + payload).then(handleErrors).then(res => res.json()).then(itineraries => {\n      dispatch({\n        type: \"FETCH_ITINERARIES\",\n        payload: itineraries\n      });\n    });\n  };\n};\nexport const addComment = (itineraryID, madeByID, comment, timestamp) => {\n  // Default options are marked with *\n  return dispatch => {\n    return fetch(\"/api/itineraries/\" + payload.itineraryID + \"/comments\", {\n      method: \"PUT\",\n      // *GET, POST, PUT, DELETE, etc.\n      headers: {\n        \"Content-Type\": \"application/json\" // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      body: JSON.stringify(payload) // body data type must match \"Content-Type\" header\n\n    }).then(handleErrors).then(response => response.json()) // parses JSON response into native JavaScript objects\n    .then(comment => {\n      dispatch({\n        type: \"ADD_COMMENT\",\n        payload: {\n          creatorID: madeByID,\n          content: comment,\n          timestamp: timestamp\n        }\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\ALON\\Documents\\0 My ACTUAL Documents\\0 learning IT\\0Ubiqum\\MERN\\MYtinerary\\client\\src\\store\\actions\\itineraryActions.js"],"names":["handleErrors","response","ok","Error","statusText","getItineraries","payload","dispatch","fetch","then","res","json","itineraries","type","addComment","itineraryID","madeByID","comment","timestamp","method","headers","body","JSON","stringify","creatorID","content"],"mappings":"AAAA,SAASA,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,UAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACD;;AACD,SAAOH,QAAP;AACD;;AAED,OAAO,MAAMI,cAAc,GAAGC,OAAO,IAAI;AACvC,SAAOC,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAAC,sBAAsBF,OAAvB,CAAL,CACJG,IADI,CACCT,YADD,EAEJS,IAFI,CAECC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAFR,EAGJF,IAHI,CAGCG,WAAW,IAAI;AACnBL,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAE,mBADC;AAEPP,QAAAA,OAAO,EAAEM;AAFF,OAAD,CAAR;AAID,KARI,CAAP;AASD,GAVD;AAWD,CAZM;AAcP,OAAO,MAAME,UAAU,GAAG,CAACC,WAAD,EAAcC,QAAd,EAAwBC,OAAxB,EAAiCC,SAAjC,KAA+C;AACvE;AACA,SAAOX,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAAC,sBAAsBF,OAAO,CAACS,WAA9B,GAA4C,WAA7C,EAA0D;AACpEI,MAAAA,MAAM,EAAE,KAD4D;AACrD;AACfC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT,CAEP;;AAFO,OAF2D;AAMpEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAejB,OAAf,CAN8D,CAMtC;;AANsC,KAA1D,CAAL,CAQJG,IARI,CAQCT,YARD,EASJS,IATI,CASCR,QAAQ,IAAIA,QAAQ,CAACU,IAAT,EATb,EAS8B;AAT9B,KAUJF,IAVI,CAUCQ,OAAO,IAAI;AACfV,MAAAA,QAAQ,CAAC;AACPM,QAAAA,IAAI,EAAE,aADC;AAEPP,QAAAA,OAAO,EAAE;AACPkB,UAAAA,SAAS,EAAER,QADJ;AAEPS,UAAAA,OAAO,EAAER,OAFF;AAGPC,UAAAA,SAAS,EAAEA;AAHJ;AAFF,OAAD,CAAR;AAQD,KAnBI,CAAP;AAoBD,GArBD;AAsBD,CAxBM","sourcesContent":["function handleErrors(response) {\r\n  if (!response.ok) {\r\n    throw Error(response.statusText);\r\n  }\r\n  return response;\r\n}\r\n\r\nexport const getItineraries = payload => {\r\n  return dispatch => {\r\n    return fetch(\"/api/itineraries/\" + payload)\r\n      .then(handleErrors)\r\n      .then(res => res.json())\r\n      .then(itineraries => {\r\n        dispatch({\r\n          type: \"FETCH_ITINERARIES\",\r\n          payload: itineraries\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const addComment = (itineraryID, madeByID, comment, timestamp) => {\r\n  // Default options are marked with *\r\n  return dispatch => {\r\n    return fetch(\"/api/itineraries/\" + payload.itineraryID + \"/comments\", {\r\n      method: \"PUT\", // *GET, POST, PUT, DELETE, etc.\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: JSON.stringify(payload) // body data type must match \"Content-Type\" header\r\n    })\r\n      .then(handleErrors)\r\n      .then(response => response.json()) // parses JSON response into native JavaScript objects\r\n      .then(comment => {\r\n        dispatch({\r\n          type: \"ADD_COMMENT\",\r\n          payload: {\r\n            creatorID: madeByID,\r\n            content: comment,\r\n            timestamp: timestamp\r\n          }\r\n        });\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}