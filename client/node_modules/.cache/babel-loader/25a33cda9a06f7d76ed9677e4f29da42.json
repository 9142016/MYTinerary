{"ast":null,"code":"export const addCurrentItineraryID = {\n  type: \"ADD_CURRENT_ITINERARY_ID\",\n  payload: String // itinerary ID\n\n}; // async with thunk\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n} // export const getAllItineraries = () => {\n//   return dispatch => {\n//     return fetch(\"/api/itineraries\")\n//       .then(handleErrors)\n//       .then(res => res.json())\n//       .then(itineraries => {\n//         dispatch({\n//           type: \"FETCH_ALL_ITINERARIES\",\n//           payload: itineraries\n//         });\n//       });\n//   };\n// };\n\n\nexport const getRelevantItineraries = payload => {\n  const ifPayload = payload ? payload : \"\";\n  return dispatch => {\n    return fetch(\"/api/itineraries/\" + ifPayload).then(handleErrors).then(res => res.json()).then(itineraries => {\n      dispatch({\n        type: \"FETCH_FILTERED_ITINERARIES\",\n        payload: itineraries\n      });\n    });\n  };\n};\nexport const addComment = (itineraryID, comment, timestamp) => {\n  let commentToSend = {\n    content: comment,\n    timestamp: timestamp\n  };\n  return dispatch => {\n    return fetch(\"/api/itineraries/addComment/\" + itineraryID, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(commentToSend) // body data type must match \"Content-Type\" header\n\n    }).then(handleErrors).then(response => response.json()) // parses JSON response into native JavaScript objects\n    .then(response => {\n      dispatch({\n        type: \"UPDATE_ITINERARY\",\n        payload: {\n          updatedItinerary: response,\n          itineraryID: itineraryID\n        }\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\ALON\\Documents\\0 My ACTUAL Documents\\0 learning IT\\0Ubiqum\\MERN\\MYtinerary\\client\\src\\store\\actions\\itineraryActions.js"],"names":["addCurrentItineraryID","type","payload","String","handleErrors","response","ok","Error","statusText","getRelevantItineraries","ifPayload","dispatch","fetch","then","res","json","itineraries","addComment","itineraryID","comment","timestamp","commentToSend","content","method","headers","body","JSON","stringify","updatedItinerary"],"mappings":"AAAA,OAAO,MAAMA,qBAAqB,GAAG;AACnCC,EAAAA,IAAI,EAAE,0BAD6B;AAEnCC,EAAAA,OAAO,EAAEC,MAF0B,CAEnB;;AAFmB,CAA9B,C,CAKP;;AAEA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,UAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACD;;AACD,SAAOH,QAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMI,sBAAsB,GAAGP,OAAO,IAAI;AAC/C,QAAMQ,SAAS,GAAGR,OAAO,GAAGA,OAAH,GAAa,EAAtC;AACA,SAAOS,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAAC,sBAAsBF,SAAvB,CAAL,CACJG,IADI,CACCT,YADD,EAEJS,IAFI,CAECC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAFR,EAGJF,IAHI,CAGCG,WAAW,IAAI;AACnBL,MAAAA,QAAQ,CAAC;AACPV,QAAAA,IAAI,EAAE,4BADC;AAEPC,QAAAA,OAAO,EAAEc;AAFF,OAAD,CAAR;AAID,KARI,CAAP;AASD,GAVD;AAWD,CAbM;AAeP,OAAO,MAAMC,UAAU,GAAG,CAACC,WAAD,EAAcC,OAAd,EAAuBC,SAAvB,KAAqC;AAC7D,MAAIC,aAAa,GAAG;AAClBC,IAAAA,OAAO,EAAEH,OADS;AAElBC,IAAAA,SAAS,EAAEA;AAFO,GAApB;AAKA,SAAOT,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAAC,iCAAiCM,WAAlC,EAA+C;AACzDK,MAAAA,MAAM,EAAE,MADiD;AAEzDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFgD;AAKzDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,aAAf,CALmD,CAKrB;;AALqB,KAA/C,CAAL,CAOJR,IAPI,CAOCT,YAPD,EAQJS,IARI,CAQCR,QAAQ,IAAIA,QAAQ,CAACU,IAAT,EARb,EAQ8B;AAR9B,KASJF,IATI,CASCR,QAAQ,IAAI;AAChBM,MAAAA,QAAQ,CAAC;AACPV,QAAAA,IAAI,EAAE,kBADC;AAEPC,QAAAA,OAAO,EAAE;AACP0B,UAAAA,gBAAgB,EAAEvB,QADX;AAEPa,UAAAA,WAAW,EAAEA;AAFN;AAFF,OAAD,CAAR;AAOD,KAjBI,CAAP;AAkBD,GAnBD;AAoBD,CA1BM","sourcesContent":["export const addCurrentItineraryID = {\r\n  type: \"ADD_CURRENT_ITINERARY_ID\",\r\n  payload: String // itinerary ID\r\n};\r\n\r\n// async with thunk\r\n\r\nfunction handleErrors(response) {\r\n  if (!response.ok) {\r\n    throw Error(response.statusText);\r\n  }\r\n  return response;\r\n}\r\n\r\n// export const getAllItineraries = () => {\r\n//   return dispatch => {\r\n//     return fetch(\"/api/itineraries\")\r\n//       .then(handleErrors)\r\n//       .then(res => res.json())\r\n//       .then(itineraries => {\r\n//         dispatch({\r\n//           type: \"FETCH_ALL_ITINERARIES\",\r\n//           payload: itineraries\r\n//         });\r\n//       });\r\n//   };\r\n// };\r\n\r\nexport const getRelevantItineraries = payload => {\r\n  const ifPayload = payload ? payload : \"\";\r\n  return dispatch => {\r\n    return fetch(\"/api/itineraries/\" + ifPayload)\r\n      .then(handleErrors)\r\n      .then(res => res.json())\r\n      .then(itineraries => {\r\n        dispatch({\r\n          type: \"FETCH_FILTERED_ITINERARIES\",\r\n          payload: itineraries\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const addComment = (itineraryID, comment, timestamp) => {\r\n  let commentToSend = {\r\n    content: comment,\r\n    timestamp: timestamp\r\n  };\r\n\r\n  return dispatch => {\r\n    return fetch(\"/api/itineraries/addComment/\" + itineraryID, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(commentToSend) // body data type must match \"Content-Type\" header\r\n    })\r\n      .then(handleErrors)\r\n      .then(response => response.json()) // parses JSON response into native JavaScript objects\r\n      .then(response => {\r\n        dispatch({\r\n          type: \"UPDATE_ITINERARY\",\r\n          payload: {\r\n            updatedItinerary: response,\r\n            itineraryID: itineraryID\r\n          }\r\n        });\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}