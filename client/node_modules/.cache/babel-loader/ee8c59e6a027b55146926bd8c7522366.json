{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALON\\\\Documents\\\\0 My ACTUAL Documents\\\\0 learning IT\\\\0Ubiqum\\\\MERN\\\\MYtinerary\\\\client\\\\src\\\\components\\\\CitiesList.js\";\nimport React from \"react\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getCities } from \"../store/actions/citiesActions\";\nimport \"./css/previewLists.css\";\n\nclass CitiesList extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      citiesFilter: \"\"\n    };\n  } //on mount, fetch cities form MongoDB, set redux state, and store here in props\n\n\n  componentDidMount() {\n    this.props.getCities();\n  } // determines relevant cities to filter\n  // if this.state.citiesFilter is empty, return all cities from props provided by redux state\n  // otherwise if this.state.citiesFilter is NOT empty, map relevent array from all cities using the filter\n\n\n  returnRelevantCities() {\n    let cities = [];\n    this.state.citiesFilter !== \"\" ? this.props.cities.map(city => {\n      if (city.name.includes(this.state.citiesFilter)) {\n        cities.push(city);\n      }\n    }) : cities = this.props.cities;\n    return cities;\n  } //function that creates styled divs per city\n\n\n  citiesBody() {\n    let relevantCities = this.returnRelevantCities();\n    let body = relevantCities.map(city => {\n      return React.createElement(\"div\", {\n        className: \"cardbody\",\n        key: city._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(NavLink, {\n        to: \"/itineraries/\" + city.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, city.name), React.createElement(\"img\", {\n        src: city.preview_img,\n        alt: \"preview card for city\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })));\n    });\n    return body;\n  } // function that is called onChange of the searchbar value. updates this.state value\n\n\n  onChangeOfFilterValue(event) {\n    this.setState({\n      citiesFilter: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"citiesMainDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"headerAndLinkcontainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"All Cities\"), React.createElement(NavLink, {\n      to: \"/itineraries/\",\n      className: \"seeAllLink\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"or see all itineraries\")), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"filterTextBox\",\n      placeholder: \"search\",\n      onChange: this.onChangeOfFilterValue.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })), this.citiesBody());\n  }\n\n} //grab cities from redux-store-state and save as params here under this.props.city\n\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities\n  };\n}; //store dispatch actions/methods in props here\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCities: () => dispatch(getCities())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(CitiesList));","map":{"version":3,"sources":["C:\\Users\\ALON\\Documents\\0 My ACTUAL Documents\\0 learning IT\\0Ubiqum\\MERN\\MYtinerary\\client\\src\\components\\CitiesList.js"],"names":["React","NavLink","withRouter","connect","getCities","CitiesList","Component","constructor","state","citiesFilter","componentDidMount","props","returnRelevantCities","cities","map","city","name","includes","push","citiesBody","relevantCities","body","_id","preview_img","onChangeOfFilterValue","event","setState","target","value","render","bind","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getCities } from \"../store/actions/citiesActions\";\r\nimport \"./css/previewLists.css\";\r\n\r\nclass CitiesList extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      citiesFilter: \"\"\r\n    };\r\n  }\r\n  //on mount, fetch cities form MongoDB, set redux state, and store here in props\r\n  componentDidMount() {\r\n    this.props.getCities();\r\n  }\r\n\r\n  // determines relevant cities to filter\r\n  // if this.state.citiesFilter is empty, return all cities from props provided by redux state\r\n  // otherwise if this.state.citiesFilter is NOT empty, map relevent array from all cities using the filter\r\n  returnRelevantCities() {\r\n    let cities = [];\r\n    this.state.citiesFilter !== \"\"\r\n      ? this.props.cities.map(city => {\r\n          if (city.name.includes(this.state.citiesFilter)) {\r\n            cities.push(city);\r\n          }\r\n        })\r\n      : (cities = this.props.cities);\r\n    return cities;\r\n  }\r\n\r\n  //function that creates styled divs per city\r\n  citiesBody() {\r\n    let relevantCities = this.returnRelevantCities();\r\n    let body = relevantCities.map(city => {\r\n      return (\r\n        <div className=\"cardbody\" key={city._id}>\r\n          <NavLink to={\"/itineraries/\" + city.name}>\r\n            <h2>{city.name}</h2>\r\n            <img src={city.preview_img} alt=\"preview card for city\" />\r\n          </NavLink>\r\n        </div>\r\n      );\r\n    });\r\n    return body;\r\n  }\r\n\r\n  // function that is called onChange of the searchbar value. updates this.state value\r\n  onChangeOfFilterValue(event) {\r\n    this.setState({\r\n      citiesFilter: event.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"citiesMainDiv\">\r\n        <div className=\"heading\">\r\n          <div className=\"headerAndLinkcontainer\">\r\n            <h1>All Cities</h1>\r\n            <NavLink to=\"/itineraries/\" className=\"seeAllLink\">\r\n              or see all itineraries\r\n            </NavLink>\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"filterTextBox\"\r\n            placeholder=\"search\"\r\n            onChange={this.onChangeOfFilterValue.bind(this)}\r\n          />\r\n        </div>\r\n\r\n        {this.citiesBody()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//grab cities from redux-store-state and save as params here under this.props.city\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cities: state.cities\r\n  };\r\n};\r\n\r\n//store dispatch actions/methods in props here\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getCities: () => dispatch(getCities())\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(CitiesList));\r\n"]},"metadata":{},"sourceType":"module"}