{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALON\\\\Documents\\\\0 My ACTUAL Documents\\\\0 learning IT\\\\0Ubiqum\\\\MERN\\\\MYtinerary\\\\client\\\\src\\\\components\\\\Itineraries.js\";\nimport React from \"react\";\nimport { NavLink, withRouter } from \"react-router-dom\"; //component for showing lists of itineraries. ote: the itinerary details page is a seperate component\n\nclass Itineraries extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callBackendAPI = async passedParam => {\n      const response = await fetch(\"/api/itineraries/\" + passedParam);\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.state = {\n      itineraries: Array\n    };\n  }\n\n  componentDidMount() {\n    // checking the optional parameters passed\n    const passedParam = this.props.match.params.city ? this.props.match.params.city : \"\"; // Call our fetch function below once the component mounts\n\n    this.callBackendAPI(passedParam).then(res => this.setState({\n      itineraries: res\n    })).catch(err => console.log(err));\n  } // function that fetches our GET route from the Express server when called.\n\n\n  itineraryTitlesBody() {\n    if (this.state.itineraries.length > 1) {\n      let body = [];\n      this.state.itineraries.forEach(itinerary => {\n        body.push(React.createElement(NavLink, {\n          to: \"/itinerary/\" + itinerary._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, itinerary.title), React.createElement(\"span\", {\n          style: flexRowStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, itinerary.price), React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, itinerary.duration, \" hours\"), React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, itinerary.rating)), React.createElement(\"img\", {\n          src: itinerary.coverPhoto,\n          style: imgs,\n          alt: itinerary.title + \"preview image\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        })));\n      });\n      return React.createElement(\"div\", {\n        style: mainDiv,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, body);\n    }\n\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Loading tasks...\");\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, this.itineraryTitlesBody());\n  }\n\n}\n\nexport default withRouter(Itineraries); /////////////////////////// CSS /////////////////////////////\n\nvar mainDiv = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  //   flexWrap: \"nowrap\",\n  justifyContent: \"center\",\n  alignItems: \"center\"\n};\nvar flexRowStyle = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"nowrap\",\n  justifyContent: \"center\"\n};\nvar imgs = {\n  width: \"100%\"\n};","map":{"version":3,"sources":["C:\\Users\\ALON\\Documents\\0 My ACTUAL Documents\\0 learning IT\\0Ubiqum\\MERN\\MYtinerary\\client\\src\\components\\Itineraries.js"],"names":["React","NavLink","withRouter","Itineraries","Component","constructor","props","callBackendAPI","passedParam","response","fetch","body","json","status","Error","message","state","itineraries","Array","componentDidMount","match","params","city","then","res","setState","catch","err","console","log","itineraryTitlesBody","length","forEach","itinerary","push","_id","title","flexRowStyle","price","duration","rating","coverPhoto","imgs","mainDiv","render","display","flexDirection","justifyContent","alignItems","flexWrap","width"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\n//component for showing lists of itineraries. ote: the itinerary details page is a seperate component\r\nclass Itineraries extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { itineraries: Array };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // checking the optional parameters passed\r\n    const passedParam = this.props.match.params.city\r\n      ? this.props.match.params.city\r\n      : \"\";\r\n    // Call our fetch function below once the component mounts\r\n    this.callBackendAPI(passedParam)\r\n      .then(res => this.setState({ itineraries: res }))\r\n      .catch(err => console.log(err));\r\n  }\r\n  // function that fetches our GET route from the Express server when called.\r\n  callBackendAPI = async passedParam => {\r\n    const response = await fetch(\"/api/itineraries/\" + passedParam);\r\n    const body = await response.json();\r\n\r\n    if (response.status !== 200) {\r\n      throw Error(body.message);\r\n    }\r\n    return body;\r\n  };\r\n  itineraryTitlesBody() {\r\n    if (this.state.itineraries.length > 1) {\r\n      let body = [];\r\n      this.state.itineraries.forEach(itinerary => {\r\n        body.push(\r\n          <NavLink to={\"/itinerary/\" + itinerary._id}>\r\n            <h1>{itinerary.title}</h1>\r\n            <span style={flexRowStyle}>\r\n              <h3>{itinerary.price}</h3>\r\n              <h3>{itinerary.duration} hours</h3>\r\n              <h3>{itinerary.rating}</h3>\r\n            </span>\r\n            <img\r\n              src={itinerary.coverPhoto}\r\n              style={imgs}\r\n              alt={itinerary.title + \"preview image\"}\r\n            />\r\n          </NavLink>\r\n        );\r\n      });\r\n      return <div style={mainDiv}>{body}</div>;\r\n    }\r\n    return <p>Loading tasks...</p>;\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.itineraryTitlesBody()}</div>;\r\n  }\r\n}\r\n\r\nexport default withRouter(Itineraries);\r\n\r\n/////////////////////////// CSS /////////////////////////////\r\nvar mainDiv = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  //   flexWrap: \"nowrap\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\"\r\n};\r\n\r\nvar flexRowStyle = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  flexWrap: \"nowrap\",\r\n  justifyContent: \"center\"\r\n};\r\n\r\nvar imgs = {\r\n  width: \"100%\"\r\n};\r\n"]},"metadata":{},"sourceType":"module"}