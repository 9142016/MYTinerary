{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALON\\\\Documents\\\\0 My ACTUAL Documents\\\\0 learning IT\\\\0Ubiqum\\\\MERN\\\\MYtinerary\\\\client\\\\src\\\\components\\\\ItinerariesList.js\";\nimport React from \"react\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getItineraries } from \"../store/actions/itineraryActions\";\nimport \"./css/previewLists.css\"; //component for showing lists of itineraries. the itinerary details page is a seperate component named ItineraryDetails\n\nclass ItinerariesList extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      itinerariesFilter: \"\"\n    };\n  }\n\n  componentDidMount() {\n    let param = this.props.match.params.cityName ? this.props.match.params.cityName : this.props.match.params.category ? this.props.match.params.category : \"\";\n    this.props.getItineraries(param);\n  }\n\n  returnRelevantItineraries() {\n    let itineraries = [];\n    this.state.itinerariesFilter !== \"\" ? this.props.itineraries.map(itinerary => {\n      if (itinerary.title.toLowerCase().includes(this.state.itinerariesFilter.toLowerCase())) {\n        itineraries.push(itinerary);\n      }\n    }) : itineraries = this.props.itineraries;\n    return itineraries;\n  } //function that creates styled divs per relevant itinerary\n\n\n  itinerariesBody() {\n    let relevantItineraries = this.returnRelevantItineraries();\n    let body = relevantItineraries.map(itinerary => {\n      return React.createElement(\"div\", {\n        className: \"cardbody\",\n        key: itinerary._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(NavLink, {\n        to: \"/itinerary/\" + itinerary._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, itinerary.title), React.createElement(\"img\", {\n        src: itinerary.coverPhoto,\n        alt: \"cover for itinerary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"itineraryDetailsUnderTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"detail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, itinerary.city), React.createElement(\"h3\", {\n        className: \"price detail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, itinerary.price), React.createElement(\"span\", {\n        className: \"rating detail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"\\u2606\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"\\u2606\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"\\u2606\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"\\u2606\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"\\u2606\")))));\n    });\n    return body;\n  } // function that is called onChange of the searchbar value. updates this.state value\n\n\n  onChangeOfFilterValue(event) {\n    this.setState({\n      itinerariesFilter: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.props.match.params.cityName ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, this.props.match.params.cityName) : React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"All Itineraries\"), React.createElement(\"input\", {\n      className: \"filterTextBox\",\n      type: \"text\",\n      placeholder: \"search\",\n      onChange: this.onChangeOfFilterValue.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })), React.createElement(NavLink, {\n      to: \"/cities/\",\n      className: \"seeAllLink\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"see all cities\"), this.itinerariesBody());\n  }\n\n} //grab cities from redux-store-state and save as params here under this.props.itineraries\n\n\nconst mapStateToProps = state => {\n  return {\n    itineraries: state.itineraries\n  };\n}; //store dispatch actions/methods in props here\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getItineraries: cityName => dispatch(getItineraries(cityName))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ItinerariesList));","map":{"version":3,"sources":["C:\\Users\\ALON\\Documents\\0 My ACTUAL Documents\\0 learning IT\\0Ubiqum\\MERN\\MYtinerary\\client\\src\\components\\ItinerariesList.js"],"names":["React","NavLink","withRouter","connect","getItineraries","ItinerariesList","Component","constructor","state","itinerariesFilter","componentDidMount","param","props","match","params","cityName","category","returnRelevantItineraries","itineraries","map","itinerary","title","toLowerCase","includes","push","itinerariesBody","relevantItineraries","body","_id","coverPhoto","city","price","onChangeOfFilterValue","event","setState","target","value","render","bind","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,kBAApC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,mCAA/B;AACA,OAAO,wBAAP,C,CAEA;;AAEA,MAAMC,eAAN,SAA8BL,KAAK,CAACM,SAApC,CAA8C;AAC5CC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,iBAAiB,EAAE;AADR,KAAb;AAGD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAAxB,GACR,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QADhB,GAER,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBE,QAAxB,GACA,KAAKJ,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBE,QADxB,GAEA,EAJJ;AAKA,SAAKJ,KAAL,CAAWR,cAAX,CAA0BO,KAA1B;AACD;;AACDM,EAAAA,yBAAyB,GAAG;AAC1B,QAAIC,WAAW,GAAG,EAAlB;AACA,SAAKV,KAAL,CAAWC,iBAAX,KAAiC,EAAjC,GACI,KAAKG,KAAL,CAAWM,WAAX,CAAuBC,GAAvB,CAA2BC,SAAS,IAAI;AACtC,UACEA,SAAS,CAACC,KAAV,CACGC,WADH,GAEGC,QAFH,CAEY,KAAKf,KAAL,CAAWC,iBAAX,CAA6Ba,WAA7B,EAFZ,CADF,EAIE;AACAJ,QAAAA,WAAW,CAACM,IAAZ,CAAiBJ,SAAjB;AACD;AACF,KARD,CADJ,GAUKF,WAAW,GAAG,KAAKN,KAAL,CAAWM,WAV9B;AAWA,WAAOA,WAAP;AACD,GA7B2C,CA+B5C;;;AACAO,EAAAA,eAAe,GAAG;AAChB,QAAIC,mBAAmB,GAAG,KAAKT,yBAAL,EAA1B;AACA,QAAIU,IAAI,GAAGD,mBAAmB,CAACP,GAApB,CAAwBC,SAAS,IAAI;AAC9C,aACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAA0B,QAAA,GAAG,EAAEA,SAAS,CAACQ,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AAAS,QAAA,EAAE,EAAE,gBAAgBR,SAAS,CAACQ,GAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKR,SAAS,CAACC,KAAf,CADF,EAGE;AAAK,QAAA,GAAG,EAAED,SAAS,CAACS,UAApB;AAAgC,QAAA,GAAG,EAAC,qBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAIE;AAAM,QAAA,SAAS,EAAC,4BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwBT,SAAS,CAACU,IAAlC,CADF,EAGE;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BV,SAAS,CAACW,KAAxC,CAHF,EAIE;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,CAJF,CAJF,CADF,CADF;AAqBD,KAtBU,CAAX;AAuBA,WAAOJ,IAAP;AACD,GA1D2C,CA4D5C;;;AACAK,EAAAA,qBAAqB,CAACC,KAAD,EAAQ;AAC3B,SAAKC,QAAL,CAAc;AACZzB,MAAAA,iBAAiB,EAAEwB,KAAK,CAACE,MAAN,CAAaC;AADpB,KAAd;AAGD;;AACDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKzB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAAxB,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAA7B,CADD,GAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJJ,EAOE;AACE,MAAA,SAAS,EAAC,eADZ;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,WAAW,EAAC,QAHd;AAIE,MAAA,QAAQ,EAAE,KAAKiB,qBAAL,CAA2BM,IAA3B,CAAgC,IAAhC,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF,EAeE,oBAAC,OAAD;AAAS,MAAA,EAAE,EAAC,UAAZ;AAAuB,MAAA,SAAS,EAAC,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAfF,EAkBG,KAAKb,eAAL,EAlBH,CADF;AAsBD;;AAzF2C,C,CA2F9C;;;AACA,MAAMc,eAAe,GAAG/B,KAAK,IAAI;AAC/B,SAAO;AACLU,IAAAA,WAAW,EAAEV,KAAK,CAACU;AADd,GAAP;AAGD,CAJD,C,CAKA;;;AACA,MAAMsB,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLrC,IAAAA,cAAc,EAAEW,QAAQ,IAAI0B,QAAQ,CAACrC,cAAc,CAACW,QAAD,CAAf;AAD/B,GAAP;AAGD,CAJD;;AAKA,eAAeZ,OAAO,CACpBoC,eADoB,EAEpBC,kBAFoB,CAAP,CAGbtC,UAAU,CAACG,eAAD,CAHG,CAAf","sourcesContent":["import React from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getItineraries } from \"../store/actions/itineraryActions\";\r\nimport \"./css/previewLists.css\";\r\n\r\n//component for showing lists of itineraries. the itinerary details page is a seperate component named ItineraryDetails\r\n\r\nclass ItinerariesList extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      itinerariesFilter: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    let param = this.props.match.params.cityName\r\n      ? this.props.match.params.cityName\r\n      : this.props.match.params.category\r\n      ? this.props.match.params.category\r\n      : \"\";\r\n    this.props.getItineraries(param);\r\n  }\r\n  returnRelevantItineraries() {\r\n    let itineraries = [];\r\n    this.state.itinerariesFilter !== \"\"\r\n      ? this.props.itineraries.map(itinerary => {\r\n          if (\r\n            itinerary.title\r\n              .toLowerCase()\r\n              .includes(this.state.itinerariesFilter.toLowerCase())\r\n          ) {\r\n            itineraries.push(itinerary);\r\n          }\r\n        })\r\n      : (itineraries = this.props.itineraries);\r\n    return itineraries;\r\n  }\r\n\r\n  //function that creates styled divs per relevant itinerary\r\n  itinerariesBody() {\r\n    let relevantItineraries = this.returnRelevantItineraries();\r\n    let body = relevantItineraries.map(itinerary => {\r\n      return (\r\n        <div className=\"cardbody\" key={itinerary._id}>\r\n          <NavLink to={\"/itinerary/\" + itinerary._id}>\r\n            <h2>{itinerary.title}</h2>\r\n\r\n            <img src={itinerary.coverPhoto} alt=\"cover for itinerary\" />\r\n            <span className=\"itineraryDetailsUnderTitle\">\r\n              <h3 className=\"detail\">{itinerary.city}</h3>\r\n\r\n              <h3 className=\"price detail\">{itinerary.price}</h3>\r\n              <span className=\"rating detail\">\r\n                <span>☆</span>\r\n                <span>☆</span>\r\n                <span>☆</span>\r\n                <span>☆</span>\r\n                <span>☆</span>\r\n              </span>\r\n            </span>\r\n          </NavLink>\r\n        </div>\r\n      );\r\n    });\r\n    return body;\r\n  }\r\n\r\n  // function that is called onChange of the searchbar value. updates this.state value\r\n  onChangeOfFilterValue(event) {\r\n    this.setState({\r\n      itinerariesFilter: event.target.value\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"heading\">\r\n          {this.props.match.params.cityName ? (\r\n            <h1>{this.props.match.params.cityName}</h1>\r\n          ) : (\r\n            <h1>All Itineraries</h1>\r\n          )}\r\n\r\n          <input\r\n            className=\"filterTextBox\"\r\n            type=\"text\"\r\n            placeholder=\"search\"\r\n            onChange={this.onChangeOfFilterValue.bind(this)}\r\n          />\r\n        </div>\r\n        <NavLink to=\"/cities/\" className=\"seeAllLink\">\r\n          see all cities\r\n        </NavLink>\r\n        {this.itinerariesBody()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//grab cities from redux-store-state and save as params here under this.props.itineraries\r\nconst mapStateToProps = state => {\r\n  return {\r\n    itineraries: state.itineraries\r\n  };\r\n};\r\n//store dispatch actions/methods in props here\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getItineraries: cityName => dispatch(getItineraries(cityName))\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(ItinerariesList));\r\n"]},"metadata":{},"sourceType":"module"}