{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALON\\\\Documents\\\\0 My ACTUAL Documents\\\\0 learning IT\\\\0Ubiqum\\\\MERN\\\\MYtinerary\\\\client\\\\src\\\\components\\\\ItinerariesList.js\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getItineraries } from \"../store/actions/itineraryActions\"; //component for showing lists of itineraries. the itinerary details page is a seperate component named ItineraryDetails\n\nclass ItinerariesList extends React.Component {\n  componentDidMount() {\n    this.props.getItineraries(this.props.match.params.cityName);\n    console.log(\"itins logged from component:\", this.props);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"Itineraries List Dummy\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, this.props.match.params.cityName + \"'s itineraries:\"));\n  }\n\n} //grab cities from redux-store-state and save as params here under this.props.itineraries\n\n\nconst mapStateToProps = state => {\n  return {\n    itineraries: state.itineraries\n  };\n}; //store dispatch actions/methods in props here\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getItineraries: cityName => dispatch(getItineraries(cityName))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ItinerariesList));","map":{"version":3,"sources":["C:\\Users\\ALON\\Documents\\0 My ACTUAL Documents\\0 learning IT\\0Ubiqum\\MERN\\MYtinerary\\client\\src\\components\\ItinerariesList.js"],"names":["React","withRouter","connect","getItineraries","ItinerariesList","Component","componentDidMount","props","match","params","cityName","console","log","render","mapStateToProps","state","itineraries","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,mCAA/B,C,CAEA;;AAEA,MAAMC,eAAN,SAA8BJ,KAAK,CAACK,SAApC,CAA8C;AAC5CC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWJ,cAAX,CAA0B,KAAKI,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAAlD;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4C,KAAKL,KAAjD;AACD;;AACDM,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKN,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAAxB,GAAmC,iBAAxC,CAFF,CADF;AAMD;;AAZ2C,C,CAc9C;;;AACA,MAAMI,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLC,IAAAA,WAAW,EAAED,KAAK,CAACC;AADd,GAAP;AAGD,CAJD,C,CAKA;;;AACA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLf,IAAAA,cAAc,EAAEO,QAAQ,IAAIQ,QAAQ,CAACf,cAAc,CAACO,QAAD,CAAf;AAD/B,GAAP;AAGD,CAJD;;AAKA,eAAeR,OAAO,CACpBY,eADoB,EAEpBG,kBAFoB,CAAP,CAGbhB,UAAU,CAACG,eAAD,CAHG,CAAf","sourcesContent":["import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getItineraries } from \"../store/actions/itineraryActions\";\r\n\r\n//component for showing lists of itineraries. the itinerary details page is a seperate component named ItineraryDetails\r\n\r\nclass ItinerariesList extends React.Component {\r\n  componentDidMount() {\r\n    this.props.getItineraries(this.props.match.params.cityName);\r\n    console.log(\"itins logged from component:\", this.props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Itineraries List Dummy</h1>\r\n        <h2>{this.props.match.params.cityName + \"'s itineraries:\"}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//grab cities from redux-store-state and save as params here under this.props.itineraries\r\nconst mapStateToProps = state => {\r\n  return {\r\n    itineraries: state.itineraries\r\n  };\r\n};\r\n//store dispatch actions/methods in props here\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getItineraries: cityName => dispatch(getItineraries(cityName))\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(ItinerariesList));\r\n"]},"metadata":{},"sourceType":"module"}