{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALON\\\\Documents\\\\0 My ACTUAL Documents\\\\0 learning IT\\\\0Ubiqum\\\\MERN\\\\MYtinerary\\\\client\\\\src\\\\components\\\\CitiesList.js\";\nimport React from \"react\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getCities } from \"../store/actions/citiesActions\";\nimport \"./css/previewLists.css\";\n\nclass CitiesList extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClick = e => {\n      console.log(\"this is:\", e);\n    };\n  }\n\n  //on mount, fetch cities form MongoDB, set redux state, and store here in props\n  componentDidMount() {\n    this.props.getCities();\n    this.setState({\n      citiesFilter: \"\"\n    });\n  } // handleEvent = e => {\n  //   this.handleEvent.\n  // }\n  //function that creates styled divs per city\n\n\n  citiesBody() {\n    if (this.props.cities.length > 1) {\n      let body = this.props.cities.map(city => {\n        return React.createElement(\"div\", {\n          className: \"cardbody\",\n          key: city._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, React.createElement(NavLink, {\n          to: \"/itineraries/\" + city.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, city.name), React.createElement(\"img\", {\n          src: city.preview_img,\n          alt: \"preview card for city\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        })), console.log(this.state), \"}\");\n      });\n      return body;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"citiesHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"All Cities\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"citiesFilter\",\n      value: this.state.value != null ? this.state.value : \"\",\n      onChange: value => this.handleClick(value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(NavLink, {\n      to: \"/itineraries/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"see all itineraries\"))), this.citiesBody());\n  }\n\n} //grab cities from redux-store-state and save as params here under this.props.city\n\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities\n  };\n}; //store dispatch actions/methods in props here\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCities: () => dispatch(getCities())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(CitiesList));","map":{"version":3,"sources":["C:\\Users\\ALON\\Documents\\0 My ACTUAL Documents\\0 learning IT\\0Ubiqum\\MERN\\MYtinerary\\client\\src\\components\\CitiesList.js"],"names":["React","NavLink","withRouter","connect","getCities","CitiesList","Component","handleClick","e","console","log","componentDidMount","props","setState","citiesFilter","citiesBody","cities","length","body","map","city","_id","name","preview_img","state","render","value","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,kBAApC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,OAAO,wBAAP;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SA6BvCC,WA7BuC,GA6BzBC,CAAC,IAAI;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,CAAxB;AACD,KA/BsC;AAAA;;AACvC;AACAG,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWR,SAAX;AACA,SAAKS,QAAL,CAAc;AACZC,MAAAA,YAAY,EAAE;AADF,KAAd;AAGD,GAPsC,CASvC;AACA;AACA;AACA;;;AACAC,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKH,KAAL,CAAWI,MAAX,CAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,UAAIC,IAAI,GAAG,KAAKN,KAAL,CAAWI,MAAX,CAAkBG,GAAlB,CAAsBC,IAAI,IAAI;AACvC,eACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAA0B,UAAA,GAAG,EAAEA,IAAI,CAACC,GAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,OAAD;AAAS,UAAA,EAAE,EAAE,kBAAkBD,IAAI,CAACE,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKF,IAAI,CAACE,IAAV,CADF,EAEE;AAAK,UAAA,GAAG,EAAEF,IAAI,CAACG,WAAf;AAA4B,UAAA,GAAG,EAAC,uBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADF,EAKGd,OAAO,CAACC,GAAR,CAAY,KAAKc,KAAjB,CALH,MADF;AASD,OAVU,CAAX;AAWA,aAAON,IAAP;AACD;AACF;;AAIDO,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAGE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,SAAS,EAAC,cAFZ;AAGE,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWE,KAAX,IAAoB,IAApB,GAA2B,KAAKF,KAAL,CAAWE,KAAtC,GAA8C,EAHvD;AAIE,MAAA,QAAQ,EAAEA,KAAK,IAAI,KAAKnB,WAAL,CAAiBmB,KAAjB,CAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAUE,oBAAC,OAAD;AAAS,MAAA,EAAE,EAAC,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CAVF,CADF,EAeG,KAAKX,UAAL,EAfH,CADF;AAmBD;;AApDsC,C,CAsDzC;;;AACA,MAAMY,eAAe,GAAGH,KAAK,IAAI;AAC/B,SAAO;AACLR,IAAAA,MAAM,EAAEQ,KAAK,CAACR;AADT,GAAP;AAGD,CAJD,C,CAMA;;;AACA,MAAMY,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLzB,IAAAA,SAAS,EAAE,MAAMyB,QAAQ,CAACzB,SAAS,EAAV;AADpB,GAAP;AAGD,CAJD;;AAMA,eAAeD,OAAO,CACpBwB,eADoB,EAEpBC,kBAFoB,CAAP,CAGb1B,UAAU,CAACG,UAAD,CAHG,CAAf","sourcesContent":["import React from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getCities } from \"../store/actions/citiesActions\";\r\nimport \"./css/previewLists.css\";\r\n\r\nclass CitiesList extends React.Component {\r\n  //on mount, fetch cities form MongoDB, set redux state, and store here in props\r\n  componentDidMount() {\r\n    this.props.getCities();\r\n    this.setState({\r\n      citiesFilter: \"\"\r\n    });\r\n  }\r\n\r\n  // handleEvent = e => {\r\n  //   this.handleEvent.\r\n  // }\r\n  //function that creates styled divs per city\r\n  citiesBody() {\r\n    if (this.props.cities.length > 1) {\r\n      let body = this.props.cities.map(city => {\r\n        return (\r\n          <div className=\"cardbody\" key={city._id}>\r\n            <NavLink to={\"/itineraries/\" + city.name}>\r\n              <h2>{city.name}</h2>\r\n              <img src={city.preview_img} alt=\"preview card for city\" />\r\n            </NavLink>\r\n            {console.log(this.state)}}\r\n          </div>\r\n        );\r\n      });\r\n      return body;\r\n    }\r\n  }\r\n  handleClick = e => {\r\n    console.log(\"this is:\", e);\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"citiesHeading\">\r\n          <h1>All Cities</h1>\r\n\r\n          <input\r\n            type=\"text\"\r\n            className=\"citiesFilter\"\r\n            value={this.state.value != null ? this.state.value : \"\"}\r\n            onChange={value => this.handleClick(value)}\r\n          />\r\n\r\n          <NavLink to=\"/itineraries/\">\r\n            <p>see all itineraries</p>\r\n          </NavLink>\r\n        </div>\r\n        {this.citiesBody()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//grab cities from redux-store-state and save as params here under this.props.city\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cities: state.cities\r\n  };\r\n};\r\n\r\n//store dispatch actions/methods in props here\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getCities: () => dispatch(getCities())\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(CitiesList));\r\n"]},"metadata":{},"sourceType":"module"}