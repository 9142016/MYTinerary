{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ALON\\\\Documents\\\\0 My ACTUAL Documents\\\\0 learning IT\\\\0Ubiqum\\\\MERN\\\\MYtinerary\\\\client\\\\src\\\\components\\\\CitiesList.js\";\nimport React from \"react\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getCities } from \"../store/actions/citiesActions\";\nimport \"./css/previewLists.css\";\n\nclass CitiesList extends React.Component {\n  //on mount, fetch cities form MongoDB, set redux state, and store here in props\n  componentDidMount() {\n    this.props.getCities();\n    this.setState({\n      citiesFilter: \"\"\n    });\n  } // // determinds relevant cities to filter\n  // relevantCities() {\n  //   let cities =\n  //     this.state.citiesFilter !== \"\"\n  //       ? this.props.cities.map\n  //       : this.props.cities.map(city => {\n  //           return city.includes(this.state.value) ? city : null;\n  //         });\n  //   this.citiesBody(cities);\n  // }\n  // //function that creates styled divs per city\n  // citiesBody(relevantCities) {\n  //   if (relevantCities > 1) {\n  //     let body = relevantCities(city => {\n  //       return (\n  //         <div className=\"cardbody\" key={city._id}>\n  //           <NavLink to={\"/itineraries/\" + city.name}>\n  //             <h2>{city.name}</h2>\n  //             <img src={city.preview_img} alt=\"preview card for city\" />\n  //           </NavLink>\n  //         </div>\n  //       );\n  //     });\n  //     return body;\n  //   }\n  // }\n  // // function that is called onChange of the searchbar value. updates this.state value\n  // onChangeOfFilterValue(event) {\n  //   this.setState({\n  //     citiesFilter: event.target.value\n  //   });\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"citiesHeading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"All Cities\"), React.createElement(NavLink, {\n      to: \"/itineraries/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"see all itineraries\"))), console.log(this.state));\n  }\n\n} //grab cities from redux-store-state and save as params here under this.props.city\n\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.cities\n  };\n}; //store dispatch actions/methods in props here\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCities: () => dispatch(getCities())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(CitiesList));","map":{"version":3,"sources":["C:\\Users\\ALON\\Documents\\0 My ACTUAL Documents\\0 learning IT\\0Ubiqum\\MERN\\MYtinerary\\client\\src\\components\\CitiesList.js"],"names":["React","NavLink","withRouter","connect","getCities","CitiesList","Component","componentDidMount","props","setState","citiesFilter","render","console","log","state","mapStateToProps","cities","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,kBAApC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,OAAO,wBAAP;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAyC;AACvC;AACAC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWJ,SAAX;AACA,SAAKK,QAAL,CAAc;AACZC,MAAAA,YAAY,EAAE;AADF,KAAd;AAGD,GAPsC,CASvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAGE,oBAAC,OAAD;AAAS,MAAA,EAAE,EAAC,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CAHF,CADF,EAQGC,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB,CARH,CADF;AAaD;;AAzDsC,C,CA2DzC;;;AACA,MAAMC,eAAe,GAAGD,KAAK,IAAI;AAC/B,SAAO;AACLE,IAAAA,MAAM,EAAEF,KAAK,CAACE;AADT,GAAP;AAGD,CAJD,C,CAMA;;;AACA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLd,IAAAA,SAAS,EAAE,MAAMc,QAAQ,CAACd,SAAS,EAAV;AADpB,GAAP;AAGD,CAJD;;AAMA,eAAeD,OAAO,CACpBY,eADoB,EAEpBE,kBAFoB,CAAP,CAGbf,UAAU,CAACG,UAAD,CAHG,CAAf","sourcesContent":["import React from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getCities } from \"../store/actions/citiesActions\";\r\nimport \"./css/previewLists.css\";\r\n\r\nclass CitiesList extends React.Component {\r\n  //on mount, fetch cities form MongoDB, set redux state, and store here in props\r\n  componentDidMount() {\r\n    this.props.getCities();\r\n    this.setState({\r\n      citiesFilter: \"\"\r\n    });\r\n  }\r\n\r\n  // // determinds relevant cities to filter\r\n  // relevantCities() {\r\n  //   let cities =\r\n  //     this.state.citiesFilter !== \"\"\r\n  //       ? this.props.cities.map\r\n  //       : this.props.cities.map(city => {\r\n  //           return city.includes(this.state.value) ? city : null;\r\n  //         });\r\n  //   this.citiesBody(cities);\r\n  // }\r\n\r\n  // //function that creates styled divs per city\r\n  // citiesBody(relevantCities) {\r\n  //   if (relevantCities > 1) {\r\n  //     let body = relevantCities(city => {\r\n  //       return (\r\n  //         <div className=\"cardbody\" key={city._id}>\r\n  //           <NavLink to={\"/itineraries/\" + city.name}>\r\n  //             <h2>{city.name}</h2>\r\n  //             <img src={city.preview_img} alt=\"preview card for city\" />\r\n  //           </NavLink>\r\n  //         </div>\r\n  //       );\r\n  //     });\r\n  //     return body;\r\n  //   }\r\n  // }\r\n  // // function that is called onChange of the searchbar value. updates this.state value\r\n  // onChangeOfFilterValue(event) {\r\n  //   this.setState({\r\n  //     citiesFilter: event.target.value\r\n  //   });\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"citiesHeading\">\r\n          <h1>All Cities</h1>\r\n          {/* <input type=\"text\" onChange={this.onChangeOfFilterValue.bind(this)} /> */}\r\n          <NavLink to=\"/itineraries/\">\r\n            <p>see all itineraries</p>\r\n          </NavLink>\r\n        </div>\r\n        {console.log(this.state)}\r\n        {/* {this.relevantCities()} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//grab cities from redux-store-state and save as params here under this.props.city\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cities: state.cities\r\n  };\r\n};\r\n\r\n//store dispatch actions/methods in props here\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getCities: () => dispatch(getCities())\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(CitiesList));\r\n"]},"metadata":{},"sourceType":"module"}