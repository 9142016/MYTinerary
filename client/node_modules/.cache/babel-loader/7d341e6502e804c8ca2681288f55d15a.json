{"ast":null,"code":"export function addCurrentItineraryID(id) {\n  return {\n    type: \"ADD_CURRENT_ITINERARY_ID\",\n    payload: id\n  };\n} // async with thunk\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n}\n\nexport const getRelevantItineraries = (payload, apiRouteParameter) => {\n  const ifPayload = payload ? payload : \"\";\n  const ifApiRouteParameter = apiRouteParameter ? apiRouteParameter : \"\";\n  return dispatch => {\n    return fetch(\"/api/itineraries\" + ifApiRouteParameter + ifPayload).then(handleErrors).then(res => res.json()).then(itineraries => {\n      console.log(itineraries);\n      dispatch({\n        type: \"FETCH_RELEVENT_ITINERARIES\",\n        payload: itineraries\n      });\n    });\n  };\n};\nexport const addComment = (itineraryID, comment, timestamp) => {\n  let commentToSend = {\n    content: comment,\n    timestamp: timestamp\n  };\n  return dispatch => {\n    return fetch(\"/api/itineraries/addComment/\" + itineraryID, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(commentToSend) // body data type must match \"Content-Type\" header\n\n    }).then(handleErrors).then(response => response.json()) // parses JSON response into native JavaScript objects\n    .then(response => {\n      dispatch({\n        type: \"UPDATE_ITINERARY\",\n        payload: {\n          updatedItinerary: response,\n          itineraryID: itineraryID\n        }\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\ALON\\Documents\\0 My ACTUAL Documents\\0 learning IT\\0Ubiqum\\MERN\\MYtinerary\\client\\src\\store\\actions\\itineraryActions.js"],"names":["addCurrentItineraryID","id","type","payload","handleErrors","response","ok","Error","statusText","getRelevantItineraries","apiRouteParameter","ifPayload","ifApiRouteParameter","dispatch","fetch","then","res","json","itineraries","console","log","addComment","itineraryID","comment","timestamp","commentToSend","content","method","headers","body","JSON","stringify","updatedItinerary"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,EAA/B,EAAmC;AACxC,SAAO;AACLC,IAAAA,IAAI,EAAE,0BADD;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,C,CAED;;AAEA,SAASG,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,UAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACD;;AACD,SAAOH,QAAP;AACD;;AAED,OAAO,MAAMI,sBAAsB,GAAG,CAACN,OAAD,EAAUO,iBAAV,KAAgC;AACpE,QAAMC,SAAS,GAAGR,OAAO,GAAGA,OAAH,GAAa,EAAtC;AACA,QAAMS,mBAAmB,GAAGF,iBAAiB,GAAGA,iBAAH,GAAuB,EAApE;AAEA,SAAOG,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAAC,qBAAqBF,mBAArB,GAA2CD,SAA5C,CAAL,CACJI,IADI,CACCX,YADD,EAEJW,IAFI,CAECC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAFR,EAGJF,IAHI,CAGCG,WAAW,IAAI;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACAL,MAAAA,QAAQ,CAAC;AACPX,QAAAA,IAAI,EAAE,4BADC;AAEPC,QAAAA,OAAO,EAAEe;AAFF,OAAD,CAAR;AAID,KATI,CAAP;AAUD,GAXD;AAYD,CAhBM;AAkBP,OAAO,MAAMG,UAAU,GAAG,CAACC,WAAD,EAAcC,OAAd,EAAuBC,SAAvB,KAAqC;AAC7D,MAAIC,aAAa,GAAG;AAClBC,IAAAA,OAAO,EAAEH,OADS;AAElBC,IAAAA,SAAS,EAAEA;AAFO,GAApB;AAKA,SAAOX,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAAC,iCAAiCQ,WAAlC,EAA+C;AACzDK,MAAAA,MAAM,EAAE,MADiD;AAEzDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFgD;AAKzDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,aAAf,CALmD,CAKrB;;AALqB,KAA/C,CAAL,CAOJV,IAPI,CAOCX,YAPD,EAQJW,IARI,CAQCV,QAAQ,IAAIA,QAAQ,CAACY,IAAT,EARb,EAQ8B;AAR9B,KASJF,IATI,CASCV,QAAQ,IAAI;AAChBQ,MAAAA,QAAQ,CAAC;AACPX,QAAAA,IAAI,EAAE,kBADC;AAEPC,QAAAA,OAAO,EAAE;AACP6B,UAAAA,gBAAgB,EAAE3B,QADX;AAEPiB,UAAAA,WAAW,EAAEA;AAFN;AAFF,OAAD,CAAR;AAOD,KAjBI,CAAP;AAkBD,GAnBD;AAoBD,CA1BM","sourcesContent":["export function addCurrentItineraryID(id) {\r\n  return {\r\n    type: \"ADD_CURRENT_ITINERARY_ID\",\r\n    payload: id\r\n  };\r\n}\r\n\r\n// async with thunk\r\n\r\nfunction handleErrors(response) {\r\n  if (!response.ok) {\r\n    throw Error(response.statusText);\r\n  }\r\n  return response;\r\n}\r\n\r\nexport const getRelevantItineraries = (payload, apiRouteParameter) => {\r\n  const ifPayload = payload ? payload : \"\";\r\n  const ifApiRouteParameter = apiRouteParameter ? apiRouteParameter : \"\";\r\n\r\n  return dispatch => {\r\n    return fetch(\"/api/itineraries\" + ifApiRouteParameter + ifPayload)\r\n      .then(handleErrors)\r\n      .then(res => res.json())\r\n      .then(itineraries => {\r\n        console.log(itineraries);\r\n        dispatch({\r\n          type: \"FETCH_RELEVENT_ITINERARIES\",\r\n          payload: itineraries\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const addComment = (itineraryID, comment, timestamp) => {\r\n  let commentToSend = {\r\n    content: comment,\r\n    timestamp: timestamp\r\n  };\r\n\r\n  return dispatch => {\r\n    return fetch(\"/api/itineraries/addComment/\" + itineraryID, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(commentToSend) // body data type must match \"Content-Type\" header\r\n    })\r\n      .then(handleErrors)\r\n      .then(response => response.json()) // parses JSON response into native JavaScript objects\r\n      .then(response => {\r\n        dispatch({\r\n          type: \"UPDATE_ITINERARY\",\r\n          payload: {\r\n            updatedItinerary: response,\r\n            itineraryID: itineraryID\r\n          }\r\n        });\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}